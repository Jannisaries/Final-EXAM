Odd

Object pooling is implemented by loading the objects before the game began rather than during. This gives us a prolonged wait period during loading that will prevent
the player from enduring increased performance loss should we have loaded the objects during the game's runtime.

Object pooling would have been implemented by setting each ghost under a central command function. If this function found that one of the ghosts were out of the game, it would
deactivate the specific ghost and activate and reposition a pair of eyes in place of the ghost.
These eyes, when not used, would be deactivated and, optionally, relocated to a designated location where they will await activation at a later date.

Activation and Deactivation are akin to construction and deconstruction when it comes to these objects. However, rather eliminating the object, we turn it off or on like a
light switch "You turn me on like a light switch"
This is done with a simple function ingrained into the code for the ghost's AI, texture, death function, and harm function.
If ON = true, you can work
If ON = false, you cannot work

Throw this into a repeating loop and the game will constantly check if the ghosts are "dead" or "alive"
Same idea goes for the eye balls, but they "die" upon fulfilling their function. So, if they manage to reach spawn and activate a ghost, the game will see no more need
for them and set their switch to off

The function for this would have to be 
// based on number of ghosts
// 4- number of ghosts
// if remainder > 0
// spawn eyeballs

//Eyeballs seek to raise the number
//reaching object located in central plaza raise the number by 1
//and asks the game to recalculate the number of ghosts

Having it ask instead of having the game constantly check saves on some amount of computational resources
The same sort of idea can be developed for the ghosts when they're killed. If their "death" function is activated then the game will be asked to calculate



It optimises the scene by providing a means by which we can continue having enemies by killed and respawned in the game without having to construct and deconstruct
the entities that comprise characters such as Clyde. The floating eyeballs and ghost are essentially two different entities since they perform different actions
and have different codes attached. The ghosts can have their AI altered and be interacted with by the player, whereas the eyeballs cannot be affected, and cannot affect,
and seek out the central enclosure where they can respawn.

If we coded this poorly, our dear friends would be spawned and respawned, constructed and deconstructed, repeatedly. This negatively impacts performance rather understandably.
To solve this, we simply activate and deactivate our characters so that they cannot be seen, cannot affect, and can be used at a later date.
The eyes, upon fulfilling their duties, will now cease to appear and function until next needed. They're not deleted and respawned like before, simply relocated to storage.
Akin to storing away your lawnmower after use rather than breaking it down, rebuilding it when you next need it.


Result:
We can have more ghosts in the scene, by telling the object pool how many to create at the game's start, without a major drain on resources occurring.
Mind you, these ghosts won't die often and same goes for the eyeballs. However, it's reasonable to assume that this tweak to the code will aid in conserving our limited
resource pool.
